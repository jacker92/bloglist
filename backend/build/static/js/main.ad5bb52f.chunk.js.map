{"version":3,"sources":["services/blogs.js","services/users.js","services/login.js","components/LoginForm.js","components/Blog.js","components/DisplayForm.js","components/CreateNewForm.js","components/Togglable.js","App.js","index.js"],"names":["_token","getAll","a","axios","get","request","data","create","blog","post","headers","Authorization","token","remove","delete","id","setToken","update","put","getByUserName","username","response","find","x","login","password","LoginForm","setNotification","useState","setUsername","setPassword","handleLogin","e","preventDefault","loginService","window","localStorage","setItem","JSON","stringify","error","className","onSubmit","type","name","onChange","target","value","Blog","setLike","user","removeBlog","visible","setVisible","onMouseEnterParagraph","style","color","onMouseLeaveParagraph","paddingTop","paddingLeft","border","borderWidth","marginBottom","onMouseEnter","onMouseLeave","onClick","title","url","likes","author","toString","removeButton","DisplayForm","blogs","logout","sort","y","map","key","CreateNewForm","createNew","setTitle","setAuthor","setUrl","titleInput","useRef","authorInput","urlInput","current","ref","Togglable","React","forwardRef","props","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","buttonLabel","children","displayName","Notification","message","App","setBlogs","setUser","setMessage","messageType","setMessageType","createFormRef","useEffect","getTokenFromStorage","getBlogs","blogService","confirm","filter","console","log","getItem","asJson","parse","userService","createBlog","event","result","concat","setTimeout","clear","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad5bb52f.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/blogs'\n\nlet _token\n\nconst getAll = async () => {\n  const request = await axios.get(baseUrl)\n  return request.data\n}\n\nconst create = async (blog) => {\n  const request = await axios.post(baseUrl, blog, {\n    headers: {\n      Authorization: `Bearer ${_token.token}`\n    }\n  })\n  return request.data\n}\n\nconst remove = async (blog) => {\n  const request = await axios.delete(`${baseUrl}/${blog.id}`, {\n    headers: {\n      Authorization: `Bearer ${_token.token}`\n    }\n  })\n  return request\n}\n\nconst update = async (blog) => {\n  const request = await axios.put(`${baseUrl}/${blog.id}`, blog, {\n    headers: {\n      Authorization: `Bearer ${_token.token}`\n    }\n  })\n  return request.data\n}\n\nconst setToken = (token) => {\n  _token = token\n}\nexport default { getAll, setToken, create, update, remove }","import axios from 'axios'\nconst baseUrl = '/api/users'\n\nconst getByUserName = async (username) => {\n  const response = await axios.get(baseUrl)\n  return response.data.find(x => x.username === username)\n}\n\nexport default { getByUserName }","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async (username, password) => {\n  const request = await axios.post(baseUrl, { username, password })\n  return request.data\n}\n\nexport default { login }","import React, { useState } from 'react'\nimport loginService from '../services/login'\nimport PropTypes from 'prop-types'\n\n\nconst LoginForm = ({ login, setNotification }) => {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  const handleLogin = async (e) => {\n    e.preventDefault()\n\n    try {\n      const token = await loginService.login(username, password)\n      login(token)\n      window.localStorage.setItem('token', JSON.stringify(token))\n    } catch (e) {\n      setNotification(e.response.data.error, 'error')\n    }\n  }\n  return (\n    <div>\n      <h2>Log in to application</h2>\n      <form className=\"login\" onSubmit={handleLogin}>\n        <table>\n          <tbody>\n            <tr>\n              <td>\n                <p>Username:</p>\n              </td>\n              <td>\n                <input type=\"text\" name=\"username\" onChange={({ target }) => setUsername(target.value)} />\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <p>Password:</p>\n              </td>\n              <td>\n                <input type=\"password\" name=\"password\" onChange={({ target }) => setPassword(target.value)} />\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <input id=\"login-button\" type=\"submit\" value=\"Submit\" />\n      </form>\n    </div>\n  )\n}\n\nLoginForm.propTypes = {\n  login: PropTypes.func.isRequired,\n  setNotification: PropTypes.func.isRequired\n}\n\nexport default LoginForm","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Blog = ({ blog, setLike, user, removeBlog }) => {\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const blogStyle = {\r\n    paddingTop: 10,\r\n    paddingLeft: 2,\r\n    border: 'solid',\r\n    borderWidth: 1,\r\n    marginBottom: 5\r\n  }\r\n\r\n  const onMouseEnterParagraph = (e) => {\r\n    e.target.style.color = '#4e5951'\r\n  }\r\n\r\n  const onMouseLeaveParagraph = (e) => {\r\n    e.target.style.color = 'black'\r\n  }\r\n\r\n  const removeButton = () => {\r\n    if (user && blog.user && user.id.toString() === blog.user.toString()) {\r\n      return (\r\n        <button onClick={() => removeBlog(blog)}>Remove blog</button>\r\n      )\r\n    }\r\n  }\r\n\r\n  if (visible) {\r\n    return (\r\n      <div style={blogStyle}>\r\n        <p\r\n          onMouseEnter={onMouseEnterParagraph}\r\n          onMouseLeave={onMouseLeaveParagraph}\r\n          onClick={() => setVisible(!visible)}\r\n        >\r\n          <b>{blog.title}</b>\r\n        </p>\r\n        {blog.url}<br />\r\n          likes {blog.likes}\r\n        <button\r\n          onClick={() => setLike(blog)}>\r\n          Like\r\n        </button>\r\n        <br />\r\n        {blog.author}\r\n        <br />\r\n        {removeButton()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className='blog'>\r\n      <p\r\n        onMouseEnter={onMouseEnterParagraph}\r\n        onMouseLeave={onMouseLeaveParagraph}\r\n        onClick={() => setVisible(!visible)}>\r\n        {blog.title} {blog.author}\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nBlog.propTypes = {\r\n  blog: PropTypes.object.isRequired,\r\n  setLike: PropTypes.func.isRequired,\r\n  user: PropTypes.object.isRequired,\r\n  removeBlog: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Blog","import React from 'react'\r\nimport Blog from './Blog'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst DisplayForm = ({ user, blogs, logout, setLike, removeBlog }) => {\r\n\r\n  const compareOnLikes = (x, y) => {\r\n    if (x.likes < y.likes) {\r\n      return 1\r\n    }\r\n    if (x.likes > y.likes) {\r\n      return -1\r\n    }\r\n    return 0\r\n  }\r\n\r\n  return (\r\n    <div id='blogs'>\r\n      <p>\r\n        <b>{user.username}</b> has logged in\r\n      </p>\r\n      <button onClick={logout}>Logout</button>\r\n      {blogs\r\n        .sort(compareOnLikes)\r\n        .map(blog =>\r\n          <Blog\r\n            key={blog.id}\r\n            blog={blog}\r\n            setLike={setLike}\r\n            user={user}\r\n            removeBlog={removeBlog}\r\n          />\r\n        )}\r\n    </div>\r\n  )\r\n}\r\n\r\nDisplayForm.propTypes = {\r\n  user: PropTypes.object.isRequired,\r\n  blogs: PropTypes.array.isRequired,\r\n  logout: PropTypes.func.isRequired,\r\n  setLike: PropTypes.func.isRequired,\r\n  removeBlog: PropTypes.func.isRequired\r\n}\r\n\r\nexport default DisplayForm","import React, { useState, useRef } from 'react'\nimport PropTypes from 'prop-types'\n\nconst CreateNewForm = ({ createNew }) => {\n  const [title, setTitle] = useState()\n  const [author, setAuthor] = useState()\n  const [url, setUrl] = useState()\n\n  const handleSubmit = (e) => {\n    createNew(e, { title, author, url })\n    titleInput.current.value = ''\n    authorInput.current.value = ''\n    urlInput.current.value = ''\n  }\n\n  const titleInput = useRef()\n  const authorInput = useRef()\n  const urlInput = useRef()\n\n  return (\n    <div>\n      <h2>Create new</h2>\n      <form onSubmit={handleSubmit}>\n                title:<input id='title' type=\"text\" onChange={(e) => setTitle(e.target.value)} ref={titleInput}></input>\n                author:<input id='author' type=\"text\" onChange={(e) => setAuthor(e.target.value)} ref={authorInput}></input>\n                url:<input id='url' type=\"text\" onChange={(e) => setUrl(e.target.value)} ref={urlInput}></input>\n        <input type=\"submit\" />\n      </form>\n    </div >\n  )\n}\n\nCreateNewForm.propTypes = {\n  createNew: PropTypes.func.isRequired\n}\n\nexport default CreateNewForm","import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible}>\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n\n})\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n\nTogglable.displayName = 'Togglable'\n\nexport default Togglable","import React, { useState, useEffect, useRef } from 'react'\r\nimport blogService from './services/blogs'\r\nimport userService from './services/users'\r\nimport LoginForm from './components/LoginForm'\r\nimport DisplayForm from './components/DisplayForm'\r\nimport CreateNewForm from './components/CreateNewForm'\r\nimport Togglable from './components/Togglable'\r\nimport './App.css'\r\n\r\nconst App = () => {\r\n  const [blogs, setBlogs] = useState([])\r\n  const [user, setUser] = useState()\r\n  const [message, setMessage] = useState()\r\n  const [messageType, setMessageType] = useState()\r\n\r\n  const createFormRef = useRef()\r\n\r\n  useEffect(() => {\r\n    getTokenFromStorage()\r\n    getBlogs()\r\n  }, [])\r\n\r\n  const getBlogs = async () => {\r\n    const blogs = await blogService.getAll()\r\n    setBlogs(blogs)\r\n  }\r\n\r\n  const removeBlog = async (blog) => {\r\n    if (!window.confirm(`Remove blog ${blog.title}`)) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      await blogService.remove(blog)\r\n      setBlogs(blogs.filter(x => x.id !== blog.id))\r\n    }\r\n    catch (e) {\r\n      console.log(e)\r\n      setNotification(e.response.data.error, 'error')\r\n    }\r\n  }\r\n\r\n  const getTokenFromStorage = async () => {\r\n    const token = window.localStorage.getItem('token')\r\n    if (token) {\r\n      const asJson = JSON.parse(token)\r\n      blogService.setToken(asJson)\r\n      const response = await userService.getByUserName(asJson.username)\r\n      setUser(response)\r\n    }\r\n  }\r\n\r\n  const logout = () => {\r\n    window.localStorage.clear()\r\n    setUser()\r\n  }\r\n\r\n  const login = async (token) => {\r\n    blogService.setToken(token)\r\n    const response = await userService.getByUserName(token.username)\r\n    setUser(response)\r\n  }\r\n\r\n  const createBlog = async (event, blog) => {\r\n    event.preventDefault()\r\n    try {\r\n      const result = await blogService.create(blog)\r\n      setNotification(`A new blog ${result.title} by ${result.author} added`, 'success')\r\n      if(createFormRef.current) {\r\n        createFormRef.current.toggleVisibility()\r\n      }\r\n      setBlogs(blogs.concat(result))\r\n    } catch (e) {\r\n      setNotification(e.response.data.error, 'error')\r\n    }\r\n  }\r\n\r\n  const setLike = async (blog) => {\r\n    blog.likes += 1\r\n    setBlogs([...blogs])\r\n    await blogService.update(blog)\r\n  }\r\n\r\n  const setNotification = (message, type) => {\r\n    setMessage(message)\r\n    setMessageType(type)\r\n\r\n    setTimeout(() => {\r\n      setMessage(null)\r\n    }, 5000)\r\n  }\r\n\r\n  if (!user) {\r\n    return (\r\n      <div>\r\n        <Notification message={message} type={messageType} />\r\n        <LoginForm login={login} setNotification={setNotification} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Blogs</h2>\r\n      <Notification message={message} type={messageType} />\r\n      <DisplayForm user={user} blogs={blogs} logout={logout} setLike={setLike} removeBlog={removeBlog} />\r\n      <Togglable buttonLabel='Create new blog' ref={createFormRef}>\r\n        <CreateNewForm createNew={createBlog} />\r\n      </Togglable>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst Notification = ({ message, type }) => {\r\n  if (!message) {\r\n    return null\r\n  }\r\n\r\n  const className = type === 'error' ? 'error' : 'success'\r\n  return (\r\n    <div className={className}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}